[metadata]
name = placement
version = 0.1.0
summary = Cloud resource scheduling
description-file =
    README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = http://docs.openstack.org/developer/nova/
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7

#[global]
# setup-hooks =
#     pbr.hooks.setup_hook

[files]
packages =
    placement

[entry_points]
# oslo.config.opts =
#     nova.conf = nova.conf.opts:list_opts
# 
# oslo.config.opts.defaults =
#     nova.conf = nova.common.config:set_middleware_defaults
# 
# oslo.policy.enforcer =
#     nova = nova.policy:get_enforcer
# 
# oslo.policy.policies =
#     # The sample policies will be ordered by entry point and then by list
#     # returned from that entry point. If more control is desired split out each
#     # list_rules method into a separate entry point rather than using the
#     # aggregate method.
#     nova = nova.policies:list_rules

wsgi_scripts =
    placement-api = placement.api.wsgi:init_application


# [build_sphinx]
# all_files = 1
# build-dir = doc/build
# source-dir = doc/source
# warning-is-error = 1
# 
# # [egg_info]
# # tag_build =
# # tag_date = 0
# # tag_svn_revision = 0
# 
# [compile_catalog]
# directory = placement/locale
# domain = placement
# 
# [update_catalog]
# domain = placement
# output_dir = placement/locale
# input_file = placement/locale/placement.pot
# 
# [extract_messages]
# keywords = _ gettext ngettext l_ lazy_gettext
# mapping_file = babel.cfg
# output_file = placement/locale/placement.pot
# 
# [wheel]
# universal = 1
# 
# [extras]
# osprofiler =
#   osprofiler>=1.4.0 # Apache-2.0
